/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CadFile } from "./CadFile";
import { CadFileCountArgs } from "./CadFileCountArgs";
import { CadFileFindManyArgs } from "./CadFileFindManyArgs";
import { CadFileFindUniqueArgs } from "./CadFileFindUniqueArgs";
import { CreateCadFileArgs } from "./CreateCadFileArgs";
import { UpdateCadFileArgs } from "./UpdateCadFileArgs";
import { DeleteCadFileArgs } from "./DeleteCadFileArgs";
import { ConversionJobFindManyArgs } from "../../conversionJob/base/ConversionJobFindManyArgs";
import { ConversionJob } from "../../conversionJob/base/ConversionJob";
import { CadFileService } from "../cadFile.service";
@graphql.Resolver(() => CadFile)
export class CadFileResolverBase {
  constructor(protected readonly service: CadFileService) {}

  async _cadFilesMeta(
    @graphql.Args() args: CadFileCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [CadFile])
  async cadFiles(
    @graphql.Args() args: CadFileFindManyArgs
  ): Promise<CadFile[]> {
    return this.service.cadFiles(args);
  }

  @graphql.Query(() => CadFile, { nullable: true })
  async cadFile(
    @graphql.Args() args: CadFileFindUniqueArgs
  ): Promise<CadFile | null> {
    const result = await this.service.cadFile(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => CadFile)
  async createCadFile(
    @graphql.Args() args: CreateCadFileArgs
  ): Promise<CadFile> {
    return await this.service.createCadFile({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => CadFile)
  async updateCadFile(
    @graphql.Args() args: UpdateCadFileArgs
  ): Promise<CadFile | null> {
    try {
      return await this.service.updateCadFile({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => CadFile)
  async deleteCadFile(
    @graphql.Args() args: DeleteCadFileArgs
  ): Promise<CadFile | null> {
    try {
      return await this.service.deleteCadFile(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [ConversionJob], { name: "conversionJobs" })
  async findConversionJobs(
    @graphql.Parent() parent: CadFile,
    @graphql.Args() args: ConversionJobFindManyArgs
  ): Promise<ConversionJob[]> {
    const results = await this.service.findConversionJobs(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
