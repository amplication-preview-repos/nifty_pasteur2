/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  CadFile as PrismaCadFile,
  ConversionJob as PrismaConversionJob,
} from "@prisma/client";

export class CadFileServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.CadFileCountArgs, "select">): Promise<number> {
    return this.prisma.cadFile.count(args);
  }

  async cadFiles(args: Prisma.CadFileFindManyArgs): Promise<PrismaCadFile[]> {
    return this.prisma.cadFile.findMany(args);
  }
  async cadFile(
    args: Prisma.CadFileFindUniqueArgs
  ): Promise<PrismaCadFile | null> {
    return this.prisma.cadFile.findUnique(args);
  }
  async createCadFile(args: Prisma.CadFileCreateArgs): Promise<PrismaCadFile> {
    return this.prisma.cadFile.create(args);
  }
  async updateCadFile(args: Prisma.CadFileUpdateArgs): Promise<PrismaCadFile> {
    return this.prisma.cadFile.update(args);
  }
  async deleteCadFile(args: Prisma.CadFileDeleteArgs): Promise<PrismaCadFile> {
    return this.prisma.cadFile.delete(args);
  }

  async findConversionJobs(
    parentId: string,
    args: Prisma.ConversionJobFindManyArgs
  ): Promise<PrismaConversionJob[]> {
    return this.prisma.cadFile
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .conversionJobs(args);
  }
}
