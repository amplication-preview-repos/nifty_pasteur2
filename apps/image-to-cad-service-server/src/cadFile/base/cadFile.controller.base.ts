/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { CadFileService } from "../cadFile.service";
import { CadFileCreateInput } from "./CadFileCreateInput";
import { CadFile } from "./CadFile";
import { CadFileFindManyArgs } from "./CadFileFindManyArgs";
import { CadFileWhereUniqueInput } from "./CadFileWhereUniqueInput";
import { CadFileUpdateInput } from "./CadFileUpdateInput";
import { ConversionJobFindManyArgs } from "../../conversionJob/base/ConversionJobFindManyArgs";
import { ConversionJob } from "../../conversionJob/base/ConversionJob";
import { ConversionJobWhereUniqueInput } from "../../conversionJob/base/ConversionJobWhereUniqueInput";

export class CadFileControllerBase {
  constructor(protected readonly service: CadFileService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: CadFile })
  async createCadFile(
    @common.Body() data: CadFileCreateInput
  ): Promise<CadFile> {
    return await this.service.createCadFile({
      data: data,
      select: {
        createdAt: true,
        format: true,
        id: true,
        updatedAt: true,
        url: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [CadFile] })
  @ApiNestedQuery(CadFileFindManyArgs)
  async cadFiles(@common.Req() request: Request): Promise<CadFile[]> {
    const args = plainToClass(CadFileFindManyArgs, request.query);
    return this.service.cadFiles({
      ...args,
      select: {
        createdAt: true,
        format: true,
        id: true,
        updatedAt: true,
        url: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: CadFile })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async cadFile(
    @common.Param() params: CadFileWhereUniqueInput
  ): Promise<CadFile | null> {
    const result = await this.service.cadFile({
      where: params,
      select: {
        createdAt: true,
        format: true,
        id: true,
        updatedAt: true,
        url: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: CadFile })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateCadFile(
    @common.Param() params: CadFileWhereUniqueInput,
    @common.Body() data: CadFileUpdateInput
  ): Promise<CadFile | null> {
    try {
      return await this.service.updateCadFile({
        where: params,
        data: data,
        select: {
          createdAt: true,
          format: true,
          id: true,
          updatedAt: true,
          url: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: CadFile })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteCadFile(
    @common.Param() params: CadFileWhereUniqueInput
  ): Promise<CadFile | null> {
    try {
      return await this.service.deleteCadFile({
        where: params,
        select: {
          createdAt: true,
          format: true,
          id: true,
          updatedAt: true,
          url: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/conversionJobs")
  @ApiNestedQuery(ConversionJobFindManyArgs)
  async findConversionJobs(
    @common.Req() request: Request,
    @common.Param() params: CadFileWhereUniqueInput
  ): Promise<ConversionJob[]> {
    const query = plainToClass(ConversionJobFindManyArgs, request.query);
    const results = await this.service.findConversionJobs(params.id, {
      ...query,
      select: {
        cadFile: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,

        image: {
          select: {
            id: true,
          },
        },

        status: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/conversionJobs")
  async connectConversionJobs(
    @common.Param() params: CadFileWhereUniqueInput,
    @common.Body() body: ConversionJobWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      conversionJobs: {
        connect: body,
      },
    };
    await this.service.updateCadFile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/conversionJobs")
  async updateConversionJobs(
    @common.Param() params: CadFileWhereUniqueInput,
    @common.Body() body: ConversionJobWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      conversionJobs: {
        set: body,
      },
    };
    await this.service.updateCadFile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/conversionJobs")
  async disconnectConversionJobs(
    @common.Param() params: CadFileWhereUniqueInput,
    @common.Body() body: ConversionJobWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      conversionJobs: {
        disconnect: body,
      },
    };
    await this.service.updateCadFile({
      where: params,
      data,
      select: { id: true },
    });
  }
}
