/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ConversionJobService } from "../conversionJob.service";
import { ConversionJobCreateInput } from "./ConversionJobCreateInput";
import { ConversionJob } from "./ConversionJob";
import { ConversionJobFindManyArgs } from "./ConversionJobFindManyArgs";
import { ConversionJobWhereUniqueInput } from "./ConversionJobWhereUniqueInput";
import { ConversionJobUpdateInput } from "./ConversionJobUpdateInput";

export class ConversionJobControllerBase {
  constructor(protected readonly service: ConversionJobService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ConversionJob })
  async createConversionJob(
    @common.Body() data: ConversionJobCreateInput
  ): Promise<ConversionJob> {
    return await this.service.createConversionJob({
      data: {
        ...data,

        cadFile: data.cadFile
          ? {
              connect: data.cadFile,
            }
          : undefined,

        image: data.image
          ? {
              connect: data.image,
            }
          : undefined,
      },
      select: {
        cadFile: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,

        image: {
          select: {
            id: true,
          },
        },

        status: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ConversionJob] })
  @ApiNestedQuery(ConversionJobFindManyArgs)
  async conversionJobs(
    @common.Req() request: Request
  ): Promise<ConversionJob[]> {
    const args = plainToClass(ConversionJobFindManyArgs, request.query);
    return this.service.conversionJobs({
      ...args,
      select: {
        cadFile: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,

        image: {
          select: {
            id: true,
          },
        },

        status: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ConversionJob })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async conversionJob(
    @common.Param() params: ConversionJobWhereUniqueInput
  ): Promise<ConversionJob | null> {
    const result = await this.service.conversionJob({
      where: params,
      select: {
        cadFile: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,

        image: {
          select: {
            id: true,
          },
        },

        status: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ConversionJob })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateConversionJob(
    @common.Param() params: ConversionJobWhereUniqueInput,
    @common.Body() data: ConversionJobUpdateInput
  ): Promise<ConversionJob | null> {
    try {
      return await this.service.updateConversionJob({
        where: params,
        data: {
          ...data,

          cadFile: data.cadFile
            ? {
                connect: data.cadFile,
              }
            : undefined,

          image: data.image
            ? {
                connect: data.image,
              }
            : undefined,
        },
        select: {
          cadFile: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          id: true,

          image: {
            select: {
              id: true,
            },
          },

          status: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ConversionJob })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteConversionJob(
    @common.Param() params: ConversionJobWhereUniqueInput
  ): Promise<ConversionJob | null> {
    try {
      return await this.service.deleteConversionJob({
        where: params,
        select: {
          cadFile: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          id: true,

          image: {
            select: {
              id: true,
            },
          },

          status: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
