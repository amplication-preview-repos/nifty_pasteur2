/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  ConversionJob as PrismaConversionJob,
  CadFile as PrismaCadFile,
  Image as PrismaImage,
} from "@prisma/client";

export class ConversionJobServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ConversionJobCountArgs, "select">
  ): Promise<number> {
    return this.prisma.conversionJob.count(args);
  }

  async conversionJobs(
    args: Prisma.ConversionJobFindManyArgs
  ): Promise<PrismaConversionJob[]> {
    return this.prisma.conversionJob.findMany(args);
  }
  async conversionJob(
    args: Prisma.ConversionJobFindUniqueArgs
  ): Promise<PrismaConversionJob | null> {
    return this.prisma.conversionJob.findUnique(args);
  }
  async createConversionJob(
    args: Prisma.ConversionJobCreateArgs
  ): Promise<PrismaConversionJob> {
    return this.prisma.conversionJob.create(args);
  }
  async updateConversionJob(
    args: Prisma.ConversionJobUpdateArgs
  ): Promise<PrismaConversionJob> {
    return this.prisma.conversionJob.update(args);
  }
  async deleteConversionJob(
    args: Prisma.ConversionJobDeleteArgs
  ): Promise<PrismaConversionJob> {
    return this.prisma.conversionJob.delete(args);
  }

  async getCadFile(parentId: string): Promise<PrismaCadFile | null> {
    return this.prisma.conversionJob
      .findUnique({
        where: { id: parentId },
      })
      .cadFile();
  }

  async getImage(parentId: string): Promise<PrismaImage | null> {
    return this.prisma.conversionJob
      .findUnique({
        where: { id: parentId },
      })
      .image();
  }
}
